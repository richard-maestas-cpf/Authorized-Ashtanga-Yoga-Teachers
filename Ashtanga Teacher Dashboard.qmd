---
title: "Ashtanga Yoga Authorized Teachers "
format: 
  dashboard:
    nav-buttons: [github]
    github: https://github.com/richard-maestas-cpf/Authorized-Ashtanga-Yoga-Teachers

---

```{r, message=FALSE, warning=FALSE, include=FALSE} 
                                     # Set up and libraries
library(tidyverse)
library(gt)
library(scales)
library(plotly)
library(glue)
library(leaflet)


teacher_data <- readRDS("outputs/teacher_data.rds")
worldcities <- read.csv("inputs/worldcities.csv")

```
# USA Map

```{r, warning=FALSE}
#| Title: USA Authorized Ashtanga Teachers

# usa teacher df
usa_teachers <- teacher_data %>%
  filter(country == "United States") %>%
  rowwise() %>%
  mutate(
    ashram = paste(
      c(if (syc_authorized == "Yes")  "SYC"   else NULL,
        if (kpjay_authorized == "Yes") "KPJAY" else NULL),
      collapse = ", "
    ),
    level = paste(
      c(if (syc_authorized == "Yes")  as.character(syc_authorization_level)   else NULL,
        if (kpjay_authorized == "Yes") as.character(kpjay_authorization_level) else NULL),
      collapse = ", "
    )
  ) %>%
  ungroup() %>%
  mutate(
    ashram = na_if(str_squish(ashram), ""),
    level  = na_if(str_squish(level),  "")
  ) %>%
  select(name, ashram, level, city, state)

# plot
# --- 1) Prep: normalize state to full name for joining with worldcities -------
# worldcities typically uses full state names in `admin_name` for US rows
state_full_from_abb <- function(x) {
  out <- x
  out[x %in% state.abb] <- state.name[match(x[x %in% state.abb], state.abb)]
  out
}

usa_teachers_geo <- usa_teachers %>%
  mutate(
    city_clean  = str_squish(city),
    state_full  = state_full_from_abb(str_squish(state)),
    key_teacher = str_to_lower(paste(city_clean, state_full, sep = ", "))
  )

world_us <- worldcities %>%
  filter(str_to_lower(country) %in% c("united states", "united states of america")) %>%
  transmute(
    city_wc     = city,
    admin_name,              # full state name
    lat, lng,
    key_world   = str_to_lower(paste(str_squish(city), str_squish(admin_name), sep = ", "))
  )

# Join on city + full state name
usa_teachers_geo <- usa_teachers_geo %>%
  left_join(world_us, by = c("key_teacher" = "key_world"))

# Optional: see any unmatched rows (missing lat/lng)
missing_geo <- usa_teachers_geo %>% filter(is.na(lat) | is.na(lng)) %>%
  distinct(city, state, state_full)
# View(missing_geo)

# --- 2) Build one popup per city (combine multiple teachers in same city) ----
popup_df <- usa_teachers_geo %>%
  filter(!is.na(lat), !is.na(lng)) %>%
  mutate(
    popup_line = glue("<b>{name}</b><br/>{ashram %||% ''}{ifelse(!is.na(ashram) & !is.na(level), ', ', '')}{level %||% ''}")
  ) %>%
  group_by(city_clean, state_full, lat, lng) %>%
  summarise(
    popup = paste0(
      glue("<div style='margin-bottom:6px'>{popup_line}</div>"),
      collapse = "<hr style='margin:6px 0'/>"
    ),
    .groups = "drop"
  )

# --- 3) Interactive map with clustering --------------------------------------
leaflet(popup_df, options = leafletOptions(minZoom = 3, maxZoom = 18)) %>%
  addProviderTiles("CartoDB.Positron") %>%
  addCircleMarkers(
    lng = ~lng, lat = ~lat,
    radius = 6, stroke = FALSE, fillOpacity = 0.85,
    popup = ~popup,
    clusterOptions = markerClusterOptions(disableClusteringAtZoom = 10)
  ) %>%
  setView(lng = -98.5, lat = 39.8, zoom = 4)

```


# Authorization Level

```{r}
#| title: Authorized teachers by institution and level

# ensure consistent factor order
lvl_order <- c("Level 1","Level 2","Certified")

auth_level <- bind_rows(
  teacher_data %>%
    transmute(institution = "SYC",
              level = factor(syc_authorization_level, levels = lvl_order),
              authorized = syc_authorized),
  teacher_data %>%
    transmute(institution = "KPJAY",
              level = factor(kpjay_authorization_level, levels = lvl_order),
              authorized = kpjay_authorized)
) %>%
  filter(authorized == "Yes") %>%                    # keep only authorized teachers
  count(institution, level, name = "n") %>%
  complete(institution, level, fill = list(n = 0))   # fill missing combos with 0

# Plot: side-by-side facets, x=level, y=count
p2 <- ggplot(auth_level, aes(x = level, y = n, fill = level)) +
  geom_col() +
  facet_wrap(~ institution, nrow = 1) +
  labs(
    x = "Authorization level",
    y = "Count",
    title = ""
  ) +
  scale_fill_manual(
    values = c("Level 1" = "Light Blue", 
               "Level 2" = "Steel Blue", 
               "Certified" = "Dark Gray")
  ) +
  theme_minimal()

ggplotly(p2)

```
# Country

```{r, scrolling="true"}
#| title: Number of Teachers by Country
country_data <- teacher_data %>% 
  group_by(country) %>% 
  summarise(count = n(), .groups = "drop") %>% 
  mutate(country = fct_reorder(country, count))

p1 <- ggplot(country_data, aes(x = country, y = count)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  labs(
    #title = "Number of Yoga Teachers by Country",
    x = " ",
    y = "Number of Authorized Teachers"
  ) +
  theme_minimal()

ggplotly(p1, height = 1000)

```

# Teacher Data

```{r, scrolling="true"}
#| title: Teacher Name and Data
head(teacher_data, 10) %>% gt() #replace with full data set when dashboard finalized
```
